{"ast":null,"code":"/* tslint:disable:no-unused-variable */\nimport { TestBed, async, fakeAsync, tick } from '@angular/core/testing';\nimport { UserComponent } from './user.component';\nimport { UserService } from \"./user.service\";\nimport { DataService } from \"../shared/data.service\";\ndescribe('Component: User', () => {\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      declarations: [UserComponent]\n    });\n  }); // test to chech component is working or not\n\n  it('should create the app', () => {\n    let fixture = TestBed.createComponent(UserComponent);\n    let app = fixture.debugElement.componentInstance;\n    expect(app).toBeTruthy();\n  });\n  it('should use the user name from the service', () => {\n    let fixture = TestBed.createComponent(UserComponent);\n    let app = fixture.debugElement.componentInstance;\n    let userService = fixture.debugElement.injector.get(UserService);\n    fixture.detectChanges();\n    expect(userService.user.name).toEqual(app.user.name);\n  });\n  it('should display the user name if user is logged in', () => {\n    let fixture = TestBed.createComponent(UserComponent);\n    let app = fixture.debugElement.componentInstance;\n    app.isLoggedIn = true;\n    fixture.detectChanges();\n    let compiled = fixture.debugElement.nativeElement;\n    expect(compiled.querySelector('p').textContent).toContain(app.user.name);\n  });\n  it('shouldn\\'t display the user name if user is not logged in', () => {\n    let fixture = TestBed.createComponent(UserComponent);\n    let app = fixture.debugElement.componentInstance;\n    fixture.detectChanges();\n    let compiled = fixture.debugElement.nativeElement;\n    expect(compiled.querySelector('p').textContent).not.toContain(app.user.name);\n  });\n  it('shouldn\\'t fetch data successfully if not called asynchronously', () => {\n    let fixture = TestBed.createComponent(UserComponent);\n    let app = fixture.debugElement.componentInstance;\n    let dataService = fixture.debugElement.injector.get(DataService);\n    let spy = spyOn(dataService, 'getDetails').and.returnValue(Promise.resolve('Data'));\n    fixture.detectChanges();\n    expect(app.data).toBe(undefined);\n  });\n  it('should fetch data successfully if called asynchronously', async(() => {\n    let fixture = TestBed.createComponent(UserComponent);\n    let app = fixture.debugElement.componentInstance;\n    let dataService = fixture.debugElement.injector.get(DataService);\n    let spy = spyOn(dataService, 'getDetails').and.returnValue(Promise.resolve('Data'));\n    fixture.detectChanges();\n    fixture.whenStable().then(() => {\n      expect(app.data).toBe('Data');\n    });\n  }));\n  it('should fetch data successfully if called asynchronously', fakeAsync(() => {\n    let fixture = TestBed.createComponent(UserComponent);\n    let app = fixture.debugElement.componentInstance;\n    let dataService = fixture.debugElement.injector.get(DataService);\n    let spy = spyOn(dataService, 'getDetails').and.returnValue(Promise.resolve('Data'));\n    fixture.detectChanges();\n    tick();\n    expect(app.data).toBe('Data');\n  }));\n});","map":{"version":3,"sources":["D:\\Angular-Project\\UnitTesting\\src\\app\\user\\user.component.spec.ts"],"names":[],"mappings":"AAAA;AAEA,SAAS,OAAT,EAAkB,KAAlB,EAAyB,SAAzB,EAAoC,IAApC,QAAgD,uBAAhD;AACA,SAAS,aAAT,QAA8B,kBAA9B;AACA,SAAS,WAAT,QAA4B,gBAA5B;AACA,SAAS,WAAT,QAA4B,wBAA5B;AAEA,QAAQ,CAAC,iBAAD,EAAoB,MAAK;AAC/B,EAAA,UAAU,CAAC,MAAK;AACd,IAAA,OAAO,CAAC,sBAAR,CAA+B;AAC7B,MAAA,YAAY,EAAE,CAAC,aAAD;AADe,KAA/B;AAGD,GAJS,CAAV,CAD+B,CAO/B;;AACA,EAAA,EAAE,CAAC,uBAAD,EAA0B,MAAK;AAC/B,QAAI,OAAO,GAAG,OAAO,CAAC,eAAR,CAAwB,aAAxB,CAAd;AACA,QAAI,GAAG,GAAG,OAAO,CAAC,YAAR,CAAqB,iBAA/B;AACA,IAAA,MAAM,CAAC,GAAD,CAAN,CAAY,UAAZ;AACD,GAJC,CAAF;AAMA,EAAA,EAAE,CAAC,2CAAD,EAA8C,MAAK;AACnD,QAAI,OAAO,GAAG,OAAO,CAAC,eAAR,CAAwB,aAAxB,CAAd;AACA,QAAI,GAAG,GAAG,OAAO,CAAC,YAAR,CAAqB,iBAA/B;AACA,QAAI,WAAW,GAAG,OAAO,CAAC,YAAR,CAAqB,QAArB,CAA8B,GAA9B,CAAkC,WAAlC,CAAlB;AACA,IAAA,OAAO,CAAC,aAAR;AACA,IAAA,MAAM,CAAC,WAAW,CAAC,IAAZ,CAAiB,IAAlB,CAAN,CAA8B,OAA9B,CAAsC,GAAG,CAAC,IAAJ,CAAS,IAA/C;AACD,GANC,CAAF;AAQA,EAAA,EAAE,CAAC,mDAAD,EAAsD,MAAK;AAC3D,QAAI,OAAO,GAAG,OAAO,CAAC,eAAR,CAAwB,aAAxB,CAAd;AACA,QAAI,GAAG,GAAG,OAAO,CAAC,YAAR,CAAqB,iBAA/B;AACA,IAAA,GAAG,CAAC,UAAJ,GAAiB,IAAjB;AACA,IAAA,OAAO,CAAC,aAAR;AACA,QAAI,QAAQ,GAAG,OAAO,CAAC,YAAR,CAAqB,aAApC;AACA,IAAA,MAAM,CAAC,QAAQ,CAAC,aAAT,CAAuB,GAAvB,EAA4B,WAA7B,CAAN,CAAgD,SAAhD,CAA0D,GAAG,CAAC,IAAJ,CAAS,IAAnE;AACD,GAPC,CAAF;AASA,EAAA,EAAE,CAAC,2DAAD,EAA8D,MAAK;AACnE,QAAI,OAAO,GAAG,OAAO,CAAC,eAAR,CAAwB,aAAxB,CAAd;AACA,QAAI,GAAG,GAAG,OAAO,CAAC,YAAR,CAAqB,iBAA/B;AACA,IAAA,OAAO,CAAC,aAAR;AACA,QAAI,QAAQ,GAAG,OAAO,CAAC,YAAR,CAAqB,aAApC;AACA,IAAA,MAAM,CAAC,QAAQ,CAAC,aAAT,CAAuB,GAAvB,EAA4B,WAA7B,CAAN,CAAgD,GAAhD,CAAoD,SAApD,CAA8D,GAAG,CAAC,IAAJ,CAAS,IAAvE;AACD,GANC,CAAF;AAQA,EAAA,EAAE,CAAC,iEAAD,EAAoE,MAAK;AACzE,QAAI,OAAO,GAAG,OAAO,CAAC,eAAR,CAAwB,aAAxB,CAAd;AACA,QAAI,GAAG,GAAG,OAAO,CAAC,YAAR,CAAqB,iBAA/B;AACA,QAAI,WAAW,GAAG,OAAO,CAAC,YAAR,CAAqB,QAArB,CAA8B,GAA9B,CAAkC,WAAlC,CAAlB;AACA,QAAI,GAAG,GAAG,KAAK,CAAC,WAAD,EAAc,YAAd,CAAL,CACP,GADO,CACH,WADG,CACS,OAAO,CAAC,OAAR,CAAgB,MAAhB,CADT,CAAV;AAEA,IAAA,OAAO,CAAC,aAAR;AACA,IAAA,MAAM,CAAC,GAAG,CAAC,IAAL,CAAN,CAAiB,IAAjB,CAAsB,SAAtB;AACD,GARC,CAAF;AAUA,EAAA,EAAE,CAAC,yDAAD,EAA4D,KAAK,CAAC,MAAK;AACvE,QAAI,OAAO,GAAG,OAAO,CAAC,eAAR,CAAwB,aAAxB,CAAd;AACA,QAAI,GAAG,GAAG,OAAO,CAAC,YAAR,CAAqB,iBAA/B;AACA,QAAI,WAAW,GAAG,OAAO,CAAC,YAAR,CAAqB,QAArB,CAA8B,GAA9B,CAAkC,WAAlC,CAAlB;AACA,QAAI,GAAG,GAAG,KAAK,CAAC,WAAD,EAAc,YAAd,CAAL,CACP,GADO,CACH,WADG,CACS,OAAO,CAAC,OAAR,CAAgB,MAAhB,CADT,CAAV;AAEA,IAAA,OAAO,CAAC,aAAR;AACA,IAAA,OAAO,CAAC,UAAR,GAAqB,IAArB,CAA0B,MAAK;AAC7B,MAAA,MAAM,CAAC,GAAG,CAAC,IAAL,CAAN,CAAiB,IAAjB,CAAsB,MAAtB;AACD,KAFD;AAGD,GAVkE,CAAjE,CAAF;AAYA,EAAA,EAAE,CAAC,yDAAD,EAA4D,SAAS,CAAC,MAAK;AAC3E,QAAI,OAAO,GAAG,OAAO,CAAC,eAAR,CAAwB,aAAxB,CAAd;AACA,QAAI,GAAG,GAAG,OAAO,CAAC,YAAR,CAAqB,iBAA/B;AACA,QAAI,WAAW,GAAG,OAAO,CAAC,YAAR,CAAqB,QAArB,CAA8B,GAA9B,CAAkC,WAAlC,CAAlB;AACA,QAAI,GAAG,GAAG,KAAK,CAAC,WAAD,EAAc,YAAd,CAAL,CACP,GADO,CACH,WADG,CACS,OAAO,CAAC,OAAR,CAAgB,MAAhB,CADT,CAAV;AAEA,IAAA,OAAO,CAAC,aAAR;AACA,IAAA,IAAI;AACJ,IAAA,MAAM,CAAC,GAAG,CAAC,IAAL,CAAN,CAAiB,IAAjB,CAAsB,MAAtB;AAED,GAVsE,CAArE,CAAF;AAWD,CAxEO,CAAR","sourcesContent":["/* tslint:disable:no-unused-variable */\n\nimport { TestBed, async, fakeAsync, tick } from '@angular/core/testing';\nimport { UserComponent } from './user.component';\nimport { UserService } from \"./user.service\";\nimport { DataService } from \"../shared/data.service\";\n\ndescribe('Component: User', () => {\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      declarations: [UserComponent]\n    });\n  });\n\n  // test to chech component is working or not\n  it('should create the app', () => {\n    let fixture = TestBed.createComponent(UserComponent);\n    let app = fixture.debugElement.componentInstance;\n    expect(app).toBeTruthy();\n  });\n\n  it('should use the user name from the service', () => {\n    let fixture = TestBed.createComponent(UserComponent);\n    let app = fixture.debugElement.componentInstance;\n    let userService = fixture.debugElement.injector.get(UserService);\n    fixture.detectChanges();\n    expect(userService.user.name).toEqual(app.user.name);\n  });\n\n  it('should display the user name if user is logged in', () => {\n    let fixture = TestBed.createComponent(UserComponent);\n    let app = fixture.debugElement.componentInstance;\n    app.isLoggedIn = true;\n    fixture.detectChanges();\n    let compiled = fixture.debugElement.nativeElement;\n    expect(compiled.querySelector('p').textContent).toContain(app.user.name);\n  });\n\n  it('shouldn\\'t display the user name if user is not logged in', () => {\n    let fixture = TestBed.createComponent(UserComponent);\n    let app = fixture.debugElement.componentInstance;\n    fixture.detectChanges();\n    let compiled = fixture.debugElement.nativeElement;\n    expect(compiled.querySelector('p').textContent).not.toContain(app.user.name);\n  });\n\n  it('shouldn\\'t fetch data successfully if not called asynchronously', () => {\n    let fixture = TestBed.createComponent(UserComponent);\n    let app = fixture.debugElement.componentInstance;\n    let dataService = fixture.debugElement.injector.get(DataService);\n    let spy = spyOn(dataService, 'getDetails')\n      .and.returnValue(Promise.resolve('Data'));\n    fixture.detectChanges();\n    expect(app.data).toBe(undefined);\n  });\n\n  it('should fetch data successfully if called asynchronously', async(() => {\n    let fixture = TestBed.createComponent(UserComponent);\n    let app = fixture.debugElement.componentInstance;\n    let dataService = fixture.debugElement.injector.get(DataService);\n    let spy = spyOn(dataService, 'getDetails')\n      .and.returnValue(Promise.resolve('Data'));\n    fixture.detectChanges();\n    fixture.whenStable().then(() => {\n      expect(app.data).toBe('Data');\n    });\n  }));\n\n  it('should fetch data successfully if called asynchronously', fakeAsync(() => {\n    let fixture = TestBed.createComponent(UserComponent);\n    let app = fixture.debugElement.componentInstance;\n    let dataService = fixture.debugElement.injector.get(DataService);\n    let spy = spyOn(dataService, 'getDetails')\n      .and.returnValue(Promise.resolve('Data'));\n    fixture.detectChanges();\n    tick();\n    expect(app.data).toBe('Data');\n\n  }));\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}